// Generated by rstantools.  Do not edit by hand.

/*
    bigIRT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bigIRT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bigIRT.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_2pl_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_2pl");
    reader.add_event(88, 86, "end", "model_2pl");
    return reader;
}
#include <stan_meta_header.hpp>
class model_2pl
  : public stan::model::model_base_crtp<model_2pl> {
private:
        int Nobs;
        int Nitems;
        int Nsubs;
        int Nscales;
        int start;
        int end;
        std::vector<int> rowIndex;
        std::vector<int> id;
        std::vector<int> score;
        std::vector<int> item;
        std::vector<int> scale;
        int fixedA;
        int fixedB;
        int fixedAbility;
        vector_d Adata;
        vector_d Bdata;
        matrix_d Abilitydata;
        int dopriors;
        double ASD;
        double BSD;
        double AbilitySD;
        double AMean;
        double BMean;
        double AbilityMean;
        int Ncorrect;
        std::vector<int> correct;
        int counter;
public:
    model_2pl(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_2pl(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_2pl_namespace::model_2pl";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "Nobs", "int", context__.to_vec());
            Nobs = int(0);
            vals_i__ = context__.vals_i("Nobs");
            pos__ = 0;
            Nobs = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "Nitems", "int", context__.to_vec());
            Nitems = int(0);
            vals_i__ = context__.vals_i("Nitems");
            pos__ = 0;
            Nitems = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Nsubs", "int", context__.to_vec());
            Nsubs = int(0);
            vals_i__ = context__.vals_i("Nsubs");
            pos__ = 0;
            Nsubs = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Nscales", "int", context__.to_vec());
            Nscales = int(0);
            vals_i__ = context__.vals_i("Nscales");
            pos__ = 0;
            Nscales = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "start", "int", context__.to_vec());
            start = int(0);
            vals_i__ = context__.vals_i("start");
            pos__ = 0;
            start = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "end", "int", context__.to_vec());
            end = int(0);
            vals_i__ = context__.vals_i("end");
            pos__ = 0;
            end = vals_i__[pos__++];
            current_statement_begin__ = 8;
            validate_non_negative_index("rowIndex", "Nobs", Nobs);
            context__.validate_dims("data initialization", "rowIndex", "int", context__.to_vec(Nobs));
            rowIndex = std::vector<int>(Nobs, int(0));
            vals_i__ = context__.vals_i("rowIndex");
            pos__ = 0;
            size_t rowIndex_k_0_max__ = Nobs;
            for (size_t k_0__ = 0; k_0__ < rowIndex_k_0_max__; ++k_0__) {
                rowIndex[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("id", "Nobs", Nobs);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(Nobs));
            id = std::vector<int>(Nobs, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = Nobs;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("score", "Nobs", Nobs);
            context__.validate_dims("data initialization", "score", "int", context__.to_vec(Nobs));
            score = std::vector<int>(Nobs, int(0));
            vals_i__ = context__.vals_i("score");
            pos__ = 0;
            size_t score_k_0_max__ = Nobs;
            for (size_t k_0__ = 0; k_0__ < score_k_0_max__; ++k_0__) {
                score[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("item", "Nobs", Nobs);
            context__.validate_dims("data initialization", "item", "int", context__.to_vec(Nobs));
            item = std::vector<int>(Nobs, int(0));
            vals_i__ = context__.vals_i("item");
            pos__ = 0;
            size_t item_k_0_max__ = Nobs;
            for (size_t k_0__ = 0; k_0__ < item_k_0_max__; ++k_0__) {
                item[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("scale", "Nobs", Nobs);
            context__.validate_dims("data initialization", "scale", "int", context__.to_vec(Nobs));
            scale = std::vector<int>(Nobs, int(0));
            vals_i__ = context__.vals_i("scale");
            pos__ = 0;
            size_t scale_k_0_max__ = Nobs;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                scale[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "fixedA", "int", context__.to_vec());
            fixedA = int(0);
            vals_i__ = context__.vals_i("fixedA");
            pos__ = 0;
            fixedA = vals_i__[pos__++];
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "fixedB", "int", context__.to_vec());
            fixedB = int(0);
            vals_i__ = context__.vals_i("fixedB");
            pos__ = 0;
            fixedB = vals_i__[pos__++];
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "fixedAbility", "int", context__.to_vec());
            fixedAbility = int(0);
            vals_i__ = context__.vals_i("fixedAbility");
            pos__ = 0;
            fixedAbility = vals_i__[pos__++];
            current_statement_begin__ = 19;
            validate_non_negative_index("Adata", "(fixedA ? Nitems : 0 )", (fixedA ? Nitems : 0 ));
            context__.validate_dims("data initialization", "Adata", "vector_d", context__.to_vec((fixedA ? Nitems : 0 )));
            Adata = Eigen::Matrix<double, Eigen::Dynamic, 1>((fixedA ? Nitems : 0 ));
            vals_r__ = context__.vals_r("Adata");
            pos__ = 0;
            size_t Adata_j_1_max__ = (fixedA ? Nitems : 0 );
            for (size_t j_1__ = 0; j_1__ < Adata_j_1_max__; ++j_1__) {
                Adata(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("Bdata", "(fixedB ? Nitems : 0 )", (fixedB ? Nitems : 0 ));
            context__.validate_dims("data initialization", "Bdata", "vector_d", context__.to_vec((fixedB ? Nitems : 0 )));
            Bdata = Eigen::Matrix<double, Eigen::Dynamic, 1>((fixedB ? Nitems : 0 ));
            vals_r__ = context__.vals_r("Bdata");
            pos__ = 0;
            size_t Bdata_j_1_max__ = (fixedB ? Nitems : 0 );
            for (size_t j_1__ = 0; j_1__ < Bdata_j_1_max__; ++j_1__) {
                Bdata(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("Abilitydata", "(fixedAbility ? Nsubs : 0 )", (fixedAbility ? Nsubs : 0 ));
            validate_non_negative_index("Abilitydata", "(fixedAbility ? Nscales : 0 )", (fixedAbility ? Nscales : 0 ));
            context__.validate_dims("data initialization", "Abilitydata", "matrix_d", context__.to_vec((fixedAbility ? Nsubs : 0 ),(fixedAbility ? Nscales : 0 )));
            Abilitydata = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((fixedAbility ? Nsubs : 0 ), (fixedAbility ? Nscales : 0 ));
            vals_r__ = context__.vals_r("Abilitydata");
            pos__ = 0;
            size_t Abilitydata_j_2_max__ = (fixedAbility ? Nscales : 0 );
            size_t Abilitydata_j_1_max__ = (fixedAbility ? Nsubs : 0 );
            for (size_t j_2__ = 0; j_2__ < Abilitydata_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Abilitydata_j_1_max__; ++j_1__) {
                    Abilitydata(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "dopriors", "int", context__.to_vec());
            dopriors = int(0);
            vals_i__ = context__.vals_i("dopriors");
            pos__ = 0;
            dopriors = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "ASD", "double", context__.to_vec());
            ASD = double(0);
            vals_r__ = context__.vals_r("ASD");
            pos__ = 0;
            ASD = vals_r__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "BSD", "double", context__.to_vec());
            BSD = double(0);
            vals_r__ = context__.vals_r("BSD");
            pos__ = 0;
            BSD = vals_r__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "AbilitySD", "double", context__.to_vec());
            AbilitySD = double(0);
            vals_r__ = context__.vals_r("AbilitySD");
            pos__ = 0;
            AbilitySD = vals_r__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "AMean", "double", context__.to_vec());
            AMean = double(0);
            vals_r__ = context__.vals_r("AMean");
            pos__ = 0;
            AMean = vals_r__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "BMean", "double", context__.to_vec());
            BMean = double(0);
            vals_r__ = context__.vals_r("BMean");
            pos__ = 0;
            BMean = vals_r__[pos__++];
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "AbilityMean", "double", context__.to_vec());
            AbilityMean = double(0);
            vals_r__ = context__.vals_r("AbilityMean");
            pos__ = 0;
            AbilityMean = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 33;
            Ncorrect = int(0);
            stan::math::fill(Ncorrect, std::numeric_limits<int>::min());
            stan::math::assign(Ncorrect,sum(stan::model::rvalue(score, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "score")));
            current_statement_begin__ = 34;
            validate_non_negative_index("correct", "Ncorrect", Ncorrect);
            correct = std::vector<int>(Ncorrect, int(0));
            stan::math::fill(correct, std::numeric_limits<int>::min());
            current_statement_begin__ = 35;
            counter = int(0);
            stan::math::fill(counter, std::numeric_limits<int>::min());
            stan::math::assign(counter,0);
            // execute transformed data statements
            current_statement_begin__ = 36;
            for (int i = start; i <= end; ++i) {
                current_statement_begin__ = 37;
                if (as_bool(logical_eq(get_base1(score, i, "score", 1), 1))) {
                    current_statement_begin__ = 38;
                    stan::math::assign(counter, (counter + 1));
                    current_statement_begin__ = 39;
                    stan::model::assign(correct, 
                                stan::model::cons_list(stan::model::index_uni(counter), stan::model::nil_index_list()), 
                                ((i - start) + 1), 
                                "assigning variable correct");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 44;
            validate_non_negative_index("Apars", "(fixedA ? 0 : Nitems )", (fixedA ? 0 : Nitems ));
            num_params_r__ += (fixedA ? 0 : Nitems );
            current_statement_begin__ = 45;
            validate_non_negative_index("Bpars", "(fixedB ? 0 : Nitems )", (fixedB ? 0 : Nitems ));
            num_params_r__ += (fixedB ? 0 : Nitems );
            current_statement_begin__ = 46;
            validate_non_negative_index("Abilitypars", "(fixedAbility ? 0 : Nsubs )", (fixedAbility ? 0 : Nsubs ));
            validate_non_negative_index("Abilitypars", "(fixedAbility ? 0 : Nscales )", (fixedAbility ? 0 : Nscales ));
            num_params_r__ += ((fixedAbility ? 0 : Nsubs ) * (fixedAbility ? 0 : Nscales ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_2pl() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 44;
        if (!(context__.contains_r("Apars")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Apars missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Apars");
        pos__ = 0U;
        validate_non_negative_index("Apars", "(fixedA ? 0 : Nitems )", (fixedA ? 0 : Nitems ));
        context__.validate_dims("parameter initialization", "Apars", "vector_d", context__.to_vec((fixedA ? 0 : Nitems )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Apars((fixedA ? 0 : Nitems ));
        size_t Apars_j_1_max__ = (fixedA ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Apars_j_1_max__; ++j_1__) {
            Apars(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(Apars);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Apars: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("Bpars")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Bpars missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Bpars");
        pos__ = 0U;
        validate_non_negative_index("Bpars", "(fixedB ? 0 : Nitems )", (fixedB ? 0 : Nitems ));
        context__.validate_dims("parameter initialization", "Bpars", "vector_d", context__.to_vec((fixedB ? 0 : Nitems )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Bpars((fixedB ? 0 : Nitems ));
        size_t Bpars_j_1_max__ = (fixedB ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Bpars_j_1_max__; ++j_1__) {
            Bpars(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(Bpars);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Bpars: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("Abilitypars")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Abilitypars missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Abilitypars");
        pos__ = 0U;
        validate_non_negative_index("Abilitypars", "(fixedAbility ? 0 : Nsubs )", (fixedAbility ? 0 : Nsubs ));
        validate_non_negative_index("Abilitypars", "(fixedAbility ? 0 : Nscales )", (fixedAbility ? 0 : Nscales ));
        context__.validate_dims("parameter initialization", "Abilitypars", "matrix_d", context__.to_vec((fixedAbility ? 0 : Nsubs ),(fixedAbility ? 0 : Nscales )));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Abilitypars((fixedAbility ? 0 : Nsubs ), (fixedAbility ? 0 : Nscales ));
        size_t Abilitypars_j_2_max__ = (fixedAbility ? 0 : Nscales );
        size_t Abilitypars_j_1_max__ = (fixedAbility ? 0 : Nsubs );
        for (size_t j_2__ = 0; j_2__ < Abilitypars_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Abilitypars_j_1_max__; ++j_1__) {
                Abilitypars(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(Abilitypars);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Abilitypars: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Apars;
            (void) Apars;  // dummy to suppress unused var warning
            if (jacobian__)
                Apars = in__.vector_constrain((fixedA ? 0 : Nitems ), lp__);
            else
                Apars = in__.vector_constrain((fixedA ? 0 : Nitems ));
            current_statement_begin__ = 45;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Bpars;
            (void) Bpars;  // dummy to suppress unused var warning
            if (jacobian__)
                Bpars = in__.vector_constrain((fixedB ? 0 : Nitems ), lp__);
            else
                Bpars = in__.vector_constrain((fixedB ? 0 : Nitems ));
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Abilitypars;
            (void) Abilitypars;  // dummy to suppress unused var warning
            if (jacobian__)
                Abilitypars = in__.matrix_constrain((fixedAbility ? 0 : Nsubs ), (fixedAbility ? 0 : Nscales ), lp__);
            else
                Abilitypars = in__.matrix_constrain((fixedAbility ? 0 : Nsubs ), (fixedAbility ? 0 : Nscales ));
            // transformed parameters
            current_statement_begin__ = 49;
            validate_non_negative_index("p", "((end - start) + 1)", ((end - start) + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p(((end - start) + 1));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("AbilityNobs", "((end - start) + 1)", ((end - start) + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> AbilityNobs(((end - start) + 1));
            stan::math::initialize(AbilityNobs, DUMMY_VAR__);
            stan::math::fill(AbilityNobs, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("A", "Nitems", Nitems);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> A(Nitems);
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("B", "Nitems", Nitems);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B(Nitems);
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("Ability", "Nsubs", Nsubs);
            validate_non_negative_index("Ability", "Nscales", Nscales);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ability(Nsubs, Nscales);
            stan::math::initialize(Ability, DUMMY_VAR__);
            stan::math::fill(Ability, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 55;
            if (as_bool(fixedA)) {
                current_statement_begin__ = 55;
                stan::math::assign(A, Adata);
            } else {
                current_statement_begin__ = 55;
                stan::math::assign(A, add(Apars, 1));
            }
            current_statement_begin__ = 56;
            if (as_bool(fixedB)) {
                current_statement_begin__ = 56;
                stan::math::assign(B, Bdata);
            } else {
                current_statement_begin__ = 56;
                stan::math::assign(B, Bpars);
            }
            current_statement_begin__ = 57;
            if (as_bool(fixedAbility)) {
                current_statement_begin__ = 57;
                stan::math::assign(Ability, Abilitydata);
            } else {
                current_statement_begin__ = 57;
                stan::math::assign(Ability, Abilitypars);
            }
            current_statement_begin__ = 59;
            for (int i = start; i <= end; ++i) {
                current_statement_begin__ = 59;
                stan::model::assign(AbilityNobs, 
                            stan::model::cons_list(stan::model::index_uni(((i - start) + 1)), stan::model::nil_index_list()), 
                            get_base1(Ability, get_base1(id, i, "id", 1), get_base1(scale, i, "scale", 1), "Ability", 1), 
                            "assigning variable AbilityNobs");
            }
            current_statement_begin__ = 61;
            stan::math::assign(p, elt_divide(1.0, add(1.0, stan::math::exp(elt_multiply(stan::model::rvalue(A, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(item, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "item")), stan::model::nil_index_list()), "A"), subtract(AbilityNobs, stan::model::rvalue(B, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(item, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "item")), stan::model::nil_index_list()), "B")))))));
            current_statement_begin__ = 67;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_multi(correct), stan::model::nil_index_list()), 
                        stan::model::deep_copy(subtract(1, stan::model::rvalue(p, stan::model::cons_list(stan::model::index_multi(correct), stan::model::nil_index_list()), "p"))), 
                        "assigning variable p");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 49;
            size_t p_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 50;
            size_t AbilityNobs_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < AbilityNobs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(AbilityNobs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: AbilityNobs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable AbilityNobs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 51;
            size_t A_j_1_max__ = Nitems;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(A(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: A" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable A: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 52;
            size_t B_j_1_max__ = Nitems;
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(B(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: B" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable B: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 53;
            size_t Ability_j_1_max__ = Nsubs;
            size_t Ability_j_2_max__ = Nscales;
            for (size_t j_1__ = 0; j_1__ < Ability_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Ability_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Ability(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Ability" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Ability: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 71;
            lp_accum__.add(sum(stan::math::log(add(p, 1e-6))));
            current_statement_begin__ = 72;
            if (as_bool(dopriors)) {
                current_statement_begin__ = 73;
                lp_accum__.add(normal_log<propto__>(A, AMean, ASD));
                current_statement_begin__ = 74;
                lp_accum__.add(normal_log<propto__>(B, BMean, BSD));
                current_statement_begin__ = 75;
                for (int i = 1; i <= Nscales; ++i) {
                    current_statement_begin__ = 76;
                    if (as_bool(logical_lte(i, Nscales))) {
                        current_statement_begin__ = 76;
                        lp_accum__.add(normal_log<propto__>(stan::model::rvalue(Ability, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "Ability"), AbilityMean, AbilitySD));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Apars");
        names__.push_back("Bpars");
        names__.push_back("Abilitypars");
        names__.push_back("p");
        names__.push_back("AbilityNobs");
        names__.push_back("A");
        names__.push_back("B");
        names__.push_back("Ability");
        names__.push_back("pcorrect");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((fixedA ? 0 : Nitems ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixedB ? 0 : Nitems ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixedAbility ? 0 : Nsubs ));
        dims__.push_back((fixedAbility ? 0 : Nscales ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((end - start) + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((end - start) + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nitems);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nitems);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubs);
        dims__.push_back(Nscales);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((end - start) + 1));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_2pl_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> Apars = in__.vector_constrain((fixedA ? 0 : Nitems ));
        size_t Apars_j_1_max__ = (fixedA ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Apars_j_1_max__; ++j_1__) {
            vars__.push_back(Apars(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> Bpars = in__.vector_constrain((fixedB ? 0 : Nitems ));
        size_t Bpars_j_1_max__ = (fixedB ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Bpars_j_1_max__; ++j_1__) {
            vars__.push_back(Bpars(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Abilitypars = in__.matrix_constrain((fixedAbility ? 0 : Nsubs ), (fixedAbility ? 0 : Nscales ));
        size_t Abilitypars_j_2_max__ = (fixedAbility ? 0 : Nscales );
        size_t Abilitypars_j_1_max__ = (fixedAbility ? 0 : Nsubs );
        for (size_t j_2__ = 0; j_2__ < Abilitypars_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Abilitypars_j_1_max__; ++j_1__) {
                vars__.push_back(Abilitypars(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 49;
            validate_non_negative_index("p", "((end - start) + 1)", ((end - start) + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> p(((end - start) + 1));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("AbilityNobs", "((end - start) + 1)", ((end - start) + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> AbilityNobs(((end - start) + 1));
            stan::math::initialize(AbilityNobs, DUMMY_VAR__);
            stan::math::fill(AbilityNobs, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("A", "Nitems", Nitems);
            Eigen::Matrix<double, Eigen::Dynamic, 1> A(Nitems);
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("B", "Nitems", Nitems);
            Eigen::Matrix<double, Eigen::Dynamic, 1> B(Nitems);
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("Ability", "Nsubs", Nsubs);
            validate_non_negative_index("Ability", "Nscales", Nscales);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Ability(Nsubs, Nscales);
            stan::math::initialize(Ability, DUMMY_VAR__);
            stan::math::fill(Ability, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 55;
            if (as_bool(fixedA)) {
                current_statement_begin__ = 55;
                stan::math::assign(A, Adata);
            } else {
                current_statement_begin__ = 55;
                stan::math::assign(A, add(Apars, 1));
            }
            current_statement_begin__ = 56;
            if (as_bool(fixedB)) {
                current_statement_begin__ = 56;
                stan::math::assign(B, Bdata);
            } else {
                current_statement_begin__ = 56;
                stan::math::assign(B, Bpars);
            }
            current_statement_begin__ = 57;
            if (as_bool(fixedAbility)) {
                current_statement_begin__ = 57;
                stan::math::assign(Ability, Abilitydata);
            } else {
                current_statement_begin__ = 57;
                stan::math::assign(Ability, Abilitypars);
            }
            current_statement_begin__ = 59;
            for (int i = start; i <= end; ++i) {
                current_statement_begin__ = 59;
                stan::model::assign(AbilityNobs, 
                            stan::model::cons_list(stan::model::index_uni(((i - start) + 1)), stan::model::nil_index_list()), 
                            get_base1(Ability, get_base1(id, i, "id", 1), get_base1(scale, i, "scale", 1), "Ability", 1), 
                            "assigning variable AbilityNobs");
            }
            current_statement_begin__ = 61;
            stan::math::assign(p, elt_divide(1.0, add(1.0, stan::math::exp(elt_multiply(stan::model::rvalue(A, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(item, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "item")), stan::model::nil_index_list()), "A"), subtract(AbilityNobs, stan::model::rvalue(B, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(item, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "item")), stan::model::nil_index_list()), "B")))))));
            current_statement_begin__ = 67;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_multi(correct), stan::model::nil_index_list()), 
                        stan::model::deep_copy(subtract(1, stan::model::rvalue(p, stan::model::cons_list(stan::model::index_multi(correct), stan::model::nil_index_list()), "p"))), 
                        "assigning variable p");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t p_j_1_max__ = ((end - start) + 1);
                for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                    vars__.push_back(p(j_1__));
                }
                size_t AbilityNobs_j_1_max__ = ((end - start) + 1);
                for (size_t j_1__ = 0; j_1__ < AbilityNobs_j_1_max__; ++j_1__) {
                    vars__.push_back(AbilityNobs(j_1__));
                }
                size_t A_j_1_max__ = Nitems;
                for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                    vars__.push_back(A(j_1__));
                }
                size_t B_j_1_max__ = Nitems;
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    vars__.push_back(B(j_1__));
                }
                size_t Ability_j_2_max__ = Nscales;
                size_t Ability_j_1_max__ = Nsubs;
                for (size_t j_2__ = 0; j_2__ < Ability_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Ability_j_1_max__; ++j_1__) {
                        vars__.push_back(Ability(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 82;
            validate_non_negative_index("pcorrect", "((end - start) + 1)", ((end - start) + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> pcorrect(((end - start) + 1));
            stan::math::initialize(pcorrect, DUMMY_VAR__);
            stan::math::fill(pcorrect, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 83;
            for (int i = start; i <= end; ++i) {
                current_statement_begin__ = 84;
                if (as_bool(logical_eq(get_base1(score, i, "score", 1), 0))) {
                    current_statement_begin__ = 84;
                    stan::model::assign(pcorrect, 
                                stan::model::cons_list(stan::model::index_uni(((i - start) + 1)), stan::model::nil_index_list()), 
                                (1 - get_base1(p, ((i - start) + 1), "p", 1)), 
                                "assigning variable pcorrect");
                } else {
                    current_statement_begin__ = 84;
                    stan::model::assign(pcorrect, 
                                stan::model::cons_list(stan::model::index_uni(((i - start) + 1)), stan::model::nil_index_list()), 
                                get_base1(p, ((i - start) + 1), "p", 1), 
                                "assigning variable pcorrect");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 82;
            size_t pcorrect_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < pcorrect_j_1_max__; ++j_1__) {
                vars__.push_back(pcorrect(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_2pl";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Apars_j_1_max__ = (fixedA ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Apars_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Apars" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Bpars_j_1_max__ = (fixedB ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Bpars_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Bpars" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Abilitypars_j_2_max__ = (fixedAbility ? 0 : Nscales );
        size_t Abilitypars_j_1_max__ = (fixedAbility ? 0 : Nsubs );
        for (size_t j_2__ = 0; j_2__ < Abilitypars_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Abilitypars_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Abilitypars" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t AbilityNobs_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < AbilityNobs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "AbilityNobs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t A_j_1_max__ = Nitems;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B_j_1_max__ = Nitems;
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Ability_j_2_max__ = Nscales;
            size_t Ability_j_1_max__ = Nsubs;
            for (size_t j_2__ = 0; j_2__ < Ability_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Ability_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Ability" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t pcorrect_j_1_max__ = ((end - start) + 1);
        for (size_t j_1__ = 0; j_1__ < pcorrect_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pcorrect" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Apars_j_1_max__ = (fixedA ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Apars_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Apars" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Bpars_j_1_max__ = (fixedB ? 0 : Nitems );
        for (size_t j_1__ = 0; j_1__ < Bpars_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Bpars" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Abilitypars_j_2_max__ = (fixedAbility ? 0 : Nscales );
        size_t Abilitypars_j_1_max__ = (fixedAbility ? 0 : Nsubs );
        for (size_t j_2__ = 0; j_2__ < Abilitypars_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Abilitypars_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Abilitypars" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t AbilityNobs_j_1_max__ = ((end - start) + 1);
            for (size_t j_1__ = 0; j_1__ < AbilityNobs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "AbilityNobs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t A_j_1_max__ = Nitems;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B_j_1_max__ = Nitems;
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Ability_j_2_max__ = Nscales;
            size_t Ability_j_1_max__ = Nsubs;
            for (size_t j_2__ = 0; j_2__ < Ability_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Ability_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Ability" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t pcorrect_j_1_max__ = ((end - start) + 1);
        for (size_t j_1__ = 0; j_1__ < pcorrect_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pcorrect" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_2pl_namespace::model_2pl stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
