out <- try(rstan::log_prob(smf,upars=parm,adjust_transform=TRUE,gradient=TRUE),silent = FALSE)
attributes(out)$time=Sys.time()-a
if("try-error" %in% class(out)) {
outerr <- out
out <- -1e100
attributes(out)$gradient <- rep(NaN, length(parm))
attributes(out)$err <- outerr
}
if(is.null(attributes(out)$gradient)) attributes(out)$gradient <- rep(NaN, length(parm))
attributes(out)$gradient[is.nan(attributes(out)$gradient)] <-
rnorm(length(attributes(out)$gradient[is.nan(attributes(out)$gradient)]),0,100)
return(out)
}'))
singletarget<-function(parm,gradnoise=TRUE) {
a=Sys.time()
out<- try(log_prob(smf,upars=parm,adjust_transform=TRUE,gradient=TRUE),silent = FALSE)
if('try-error' %in% class(out) || is.nan(out)) {
out=-1e100
attributes(out) <- list(gradient=rep(0,length(parm)))
}
b=Sys.time()
evaltime <- b-a
if(verbose > 0) print(paste('prob= ',exp(out/standata$Nobs),' ,    iter time = ',round(evaltime,2)),digits=14)
return(out)
}
clms=parallel::makeCluster(cores,useXDR=FALSE,type='PSOCK',outfile='')
# on.exit(try({parallel::stopCluster(clms)},silent=TRUE),add=TRUE)
parallel::clusterExport(clms,varlist = c('standata_specificsubjects','sm'),envir = environment())
env <- new.env(parent = globalenv(),hash = TRUE)
environment(parlp) <- env
iter <-0
storedLp <- c()
target<-function(parm,gradnoise=TRUE){
a=Sys.time()
out2<- parallel::clusterCall(clms,parlp,parm)
tmp<-sapply(1:length(out2),function(x) {
if(!is.null(attributes(out2[[x]])$err)){
if(length(out2) > 1 && as.logical(verbose)) message('Error on core ', x,' but continuing:')
message(attributes(out2[[x]])$err)
}
})
out <- try(sum(unlist(out2)),silent=TRUE)
# attributes(out)$gradient <- try(apply(sapply(out2,function(x) attributes(x)$gradient,simplify='matrix'),1,sum))
for(i in seq_along(out2)){
if(i==1) attributes(out)$gradient <- attributes(out2[[1]])$gradient
if(i>1) attributes(out)$gradient <- attributes(out)$gradient+attributes(out2[[i]])$gradient
}
if('try-error' %in% class(out) || is.nan(out)) {
out=-1e100
attributes(out) <- list(gradient=rep(0,length(parm)))
}
if(plot > 0){
if(out[1] > (-1e99)) storedLp <<- c(storedLp,out[1])
iter <<- iter+1
# g=log(abs(attributes(out)$gradient))*sign(attributes(out)$gradient)
if(iter %% plot == 0){
par(mfrow=c(1,1))
# plot(parm,xlab='param',ylab='par value',col=1:length(parm))
plot(tail(1:iter,500), tail(exp(storedLp/standata$Nobs),500),ylab='target',type='l') #log(1+tail(-storedLp,500)-min(tail(-storedLp,500)))
# plot(g,type='p',col=1:length(parm),ylab='gradient',xlab='param')
}
b=Sys.time()
if(verbose > 0) print(paste('lp= ',exp(out/standata$Nobs),' , iter time = ',round(b-a,5),
' , core times = ',paste(sapply(out2,function(x) round(attributes(x)$time,3)),collapse=', ')))
return(out)
}
mizelpg=list( #single core mize functions
fg=function(pars){
r=-target(pars)
r=list(fn=r[1],gr= -attributes(r)$gradient)
return(r)
},
fn=function(x) -target(x),
gr=function(pars) -attributes(target(pars))$gradient
)
splitby='rowIndex'
# if(split){
#   stanindices <- split(unique(standata[[splitby]][-1]),sort(unique(standata[[splitby]][-1]) %% (cores-1)))
#   stanindices <- c(stanindices,1)
# }
stanindices <- split(unique(standata[[splitby]]),sort(unique(standata[[splitby]]) %% (cores)))
if(!split) stanindices <- lapply(1:cores,function(x) unique(standata[[splitby]]))
if(!split && length(stanindices) < cores){
for(i in (length(stanindices)+1):cores){
stanindices[[i]] <- NA
}
parallel::clusterExport(clms,c('standata','splitby'),envir = environment())
parallel::clusterApply(clms,stanindices,function(subindices) {
library(rstan)
library(ctsem)
if(length(subindices) < length(unique(standata[[splitby]]))) standata <- standata_specificsubjects(standata,subindices)
if(!1 %in% subindices) standata$dopriors <- 0L
if(FALSE) sm=99
g = eval(parse(text=paste0('gl','obalenv()'))) #avoid spurious cran check -- assigning to global environment only on created parallel workers.
assign('smf',ctsem:::stan_reinitsf(sm,standata),pos = g)
rm(standata)
NULL
})
split
split=TRUE
devtools::load_all(".")
fit <- fitIRT(dat)
sdat <- list(
Nobs=nrow(dat),
Nsubs=length(unique(dat$id)),
Nitems=length(unique(dat$Item)),
id=as.integer(factor(dat$id)),
dopriors=1L,
start=1L,
end=as.integer(nrow(dat)),
score=array(as.numeric(dat$score)),
item = array(as.integer(factor(dat$Item))),
scale=array(as.integer(factor(dat$Scale))),
Adata=Adata,Bdata=Bdata,Abilitydata=Abilitydata,
AMean=AMean,ASD=ASD,BMean=BMean,BSD=BSD,AbilityMean=AbilityMean,AbilitySD=AbilitySD)
standata$rowIndex <- 1:standata$Nobs
standata_specificsubjects <- function(standata, subindices){
standata$start <- as.integer(min(subindices))
standata$end <- as.integer(max(subindices))
return(standata)
}
msParallelStan <- function(cl, standata,splitby='rowIndex', split=TRUE){
library(rstan)
library(ctsem)
cores <- length(cl)
if(split){
stanindices <- split(unique(standata[[splitby]]),sort(unique(standata[[splitby]][-1]) %% cores-1))
stanindices <- list(stanindices,1)
}
if(!split) stanindices <- lapply(1:cores,function(x) unique(standata[[splitby]]))
if(!split && length(stanindices) < cores){
for(i in (length(stanindices)+1):cores){
stanindices[[i]] <- NA
}
parallel::clusterExport(cl,c('standata'),envir = environment())
parallel::clusterApply(cl,stanindices,function(subindices) {
if(length(subindices) < length(unique(standata[[splitby]]))) standata <- standata_specificsubjects(standata,subindices)
if(!1 %in% subindices) standata$dopriors <- 0L
if(FALSE) sm=99
g = eval(parse(text=paste0('gl','obalenv()'))) #avoid spurious cran check -- assigning to global environment only on created parallel workers.
assign('smf',ctsem:::stan_reinitsf(sm,standata),pos = g)
rm(standata)
NULL
})
NULL
}
# smf <- ctsem:::stan_reinitsf(model = sm,data = standata)
eval(parse(text=
'parlp <- function(parm){
a=Sys.time()
out <- try(rstan::log_prob(smf,upars=parm,adjust_transform=TRUE,gradient=TRUE),silent = FALSE)
attributes(out)$time=Sys.time()-a
if("try-error" %in% class(out)) {
outerr <- out
out <- -1e100
attributes(out)$gradient <- rep(NaN, length(parm))
attributes(out)$err <- outerr
}
if(is.null(attributes(out)$gradient)) attributes(out)$gradient <- rep(NaN, length(parm))
attributes(out)$gradient[is.nan(attributes(out)$gradient)] <-
rnorm(length(attributes(out)$gradient[is.nan(attributes(out)$gradient)]),0,100)
return(out)
}'))
singletarget<-function(parm,gradnoise=TRUE) {
a=Sys.time()
out<- try(log_prob(smf,upars=parm,adjust_transform=TRUE,gradient=TRUE),silent = FALSE)
if('try-error' %in% class(out) || is.nan(out)) {
out=-1e100
attributes(out) <- list(gradient=rep(0,length(parm)))
}
b=Sys.time()
evaltime <- b-a
if(verbose > 0) print(paste('prob= ',exp(out/standata$Nobs),' ,    iter time = ',round(evaltime,2)),digits=14)
return(out)
}
if(cores==1){
target = singletarget #we use this for importance sampling
smf <- ctsem:::stan_reinitsf(sm,standata)
}
if(cores > 1){ #for parallelised computation after fitting, if only single subject
clms=parallel::makeCluster(cores,useXDR=FALSE,type='PSOCK',outfile='')
# on.exit(try({parallel::stopCluster(clms)},silent=TRUE),add=TRUE)
parallel::clusterExport(clms,varlist = c('standata_specificsubjects','sm'),envir = environment())
#crazy trickery to avoid parallel communication pauses
env <- new.env(parent = globalenv(),hash = TRUE)
environment(parlp) <- env
iter <-0
storedLp <- c()
target<-function(parm,gradnoise=TRUE){
a=Sys.time()
out2<- parallel::clusterCall(clms,parlp,parm)
tmp<-sapply(1:length(out2),function(x) {
if(!is.null(attributes(out2[[x]])$err)){
if(length(out2) > 1 && as.logical(verbose)) message('Error on core ', x,' but continuing:')
message(attributes(out2[[x]])$err)
}
})
out <- try(sum(unlist(out2)),silent=TRUE)
# attributes(out)$gradient <- try(apply(sapply(out2,function(x) attributes(x)$gradient,simplify='matrix'),1,sum))
for(i in seq_along(out2)){
if(i==1) attributes(out)$gradient <- attributes(out2[[1]])$gradient
if(i>1) attributes(out)$gradient <- attributes(out)$gradient+attributes(out2[[i]])$gradient
}
if('try-error' %in% class(out) || is.nan(out)) {
out=-1e100
attributes(out) <- list(gradient=rep(0,length(parm)))
}
if(plot > 0){
if(out[1] > (-1e99)) storedLp <<- c(storedLp,out[1])
iter <<- iter+1
# g=log(abs(attributes(out)$gradient))*sign(attributes(out)$gradient)
if(iter %% plot == 0){
par(mfrow=c(1,1))
# plot(parm,xlab='param',ylab='par value',col=1:length(parm))
plot(tail(1:iter,500), tail(exp(storedLp/standata$Nobs),500),ylab='target',type='l') #log(1+tail(-storedLp,500)-min(tail(-storedLp,500)))
# plot(g,type='p',col=1:length(parm),ylab='gradient',xlab='param')
}
b=Sys.time()
if(verbose > 0) print(paste('lp= ',exp(out/standata$Nobs),' , iter time = ',round(b-a,5),
' , core times = ',paste(sapply(out2,function(x) round(attributes(x)$time,3)),collapse=', ')))
return(out)
}
mizelpg=list( #single core mize functions
fg=function(pars){
r=-target(pars)
r=list(fn=r[1],gr= -attributes(r)$gradient)
return(r)
},
fn=function(x) -target(x),
gr=function(pars) -attributes(target(pars))$gradient
)
splitby='rowIndex'
# if(split){
#   stanindices <- split(unique(standata[[splitby]][-1]),sort(unique(standata[[splitby]][-1]) %% (cores-1)))
#   stanindices <- c(stanindices,1)
# }
stanindices <- split(unique(standata[[splitby]]),sort(unique(standata[[splitby]]) %% (cores)))
if(!split) stanindices <- lapply(1:cores,function(x) unique(standata[[splitby]]))
if(!split && length(stanindices) < cores){
for(i in (length(stanindices)+1):cores){
stanindices[[i]] <- NA
}
parallel::clusterExport(clms,c('standata','splitby'),envir = environment())
parallel::clusterApply(clms,stanindices,function(subindices) {
library(rstan)
library(ctsem)
if(length(subindices) < length(unique(standata[[splitby]]))) standata <- standata_specificsubjects(standata,subindices)
if(!1 %in% subindices) standata$dopriors <- 0L
if(FALSE) sm=99
g = eval(parse(text=paste0('gl','obalenv()'))) #avoid spurious cran check -- assigning to global environment only on created parallel workers.
assign('smf',ctsem:::stan_reinitsf(sm,standata),pos = g)
rm(standata)
NULL
})
if(cores==1) npars=get_num_upars(smf) else npars=parallel::clusterCall(clms,function(x) eval(parse(text='rstan::get_num_upars(smf)')))[[1]]
fit <- fitIRT(dat,cores=1)
library(rstan)
fit <- fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
dat$Scale
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
as.integer(length(Adata > 0)
)
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
Adata
score='score'; item='item'; scale='scale';Adata=c();Bdata=c();Abilitydata=c();
AMean=1;ASD=0;BMean=0;BSD=1000; AbilityMean=0;AbilitySD=1;iter=2000;cores=6
sdat <- list(
Nobs=nrow(dat),
Nsubs=length(unique(dat$id)),
Nitems=length(unique(dat$Item)),
Nscales=length(unique(dat$Scale)),
id=as.integer(factor(dat$id)),
dopriors=1L,
start=1L,
end=as.integer(nrow(dat)),
score=array(as.integer(dat$score)),
item = array(as.integer(factor(dat$Item))),
Scale=array(as.integer(factor(dat$Scale))),
Adata=Adata,Bdata=Bdata,Abilitydata=Abilitydata,
AMean=AMean,ASD=ASD,BMean=BMean,BSD=BSD,AbilityMean=AbilityMean,AbilitySD=AbilitySD,
fixedA=as.integer(length(Adata > 0)),fixedB=as.integer(length(Bdata > 0)),fixedAbility=as.integer(length(Abilitydata > 0)))
sdat$Adata
score='score'; item='item'; scale='scale';Adata=c();Bdata=c();Abilitydata=c();
AMean=1;ASD=0;BMean=0;BSD=1000; AbilityMean=0;AbilitySD=1;iter=2000;cores=6
sdat <- list(
Nobs=nrow(dat),
Nsubs=length(unique(dat[[id]])),
Nitems=length(unique(dat[[item]])),
Nscales=length(unique(dat[[Scale]])),
id=as.integer(factor(dat[[id]])),
dopriors=1L,
start=1L,
end=as.integer(nrow(dat)),
score=array(as.integer(dat[[score]])),
item = array(as.integer(factor(dat[[Item]]))),
Scale=array(as.integer(factor(dat[[Scale]]))),
Adata=numeric(Adata),Bdata=Bdata,Abilitydata=Abilitydata,
AMean=AMean,ASD=ASD,BMean=BMean,BSD=BSD,AbilityMean=AbilityMean,AbilitySD=AbilitySD,
fixedA=as.integer(length(Adata > 0)),fixedB=as.integer(length(Bdata > 0)),fixedAbility=as.integer(length(Abilitydata > 0)))
id='id'
sdat <- list(
Nobs=nrow(dat),
Nsubs=length(unique(dat[[id]])),
Nitems=length(unique(dat[[item]])),
Nscales=length(unique(dat[[Scale]])),
id=as.integer(factor(dat[[id]])),
dopriors=1L,
start=1L,
end=as.integer(nrow(dat)),
score=array(as.integer(dat[[score]])),
item = array(as.integer(factor(dat[[Item]]))),
Scale=array(as.integer(factor(dat[[Scale]]))),
Adata=numeric(Adata),Bdata=Bdata,Abilitydata=Abilitydata,
AMean=AMean,ASD=ASD,BMean=BMean,BSD=BSD,AbilityMean=AbilityMean,AbilitySD=AbilitySD,
fixedA=as.integer(length(Adata > 0)),fixedB=as.integer(length(Bdata > 0)),fixedAbility=as.integer(length(Abilitydata > 0)))
score='score'; item='Item'; Scale='Scale';Adata=c();Bdata=c();Abilitydata=c();
AMean=1;ASD=0;BMean=0;BSD=1000; AbilityMean=0;AbilitySD=1;iter=2000;cores=6;id='id'
sdat <- list(
Nobs=nrow(dat),
Nsubs=length(unique(dat[[id]])),
Nitems=length(unique(dat[[item]])),
Nscales=length(unique(dat[[Scale]])),
id=as.integer(factor(dat[[id]])),
dopriors=1L,
start=1L,
end=as.integer(nrow(dat)),
score=array(as.integer(dat[[score]])),
item = array(as.integer(factor(dat[[Item]]))),
Scale=array(as.integer(factor(dat[[Scale]]))),
Adata=numeric(Adata),Bdata=Bdata,Abilitydata=Abilitydata,
AMean=AMean,ASD=ASD,BMean=BMean,BSD=BSD,AbilityMean=AbilityMean,AbilitySD=AbilitySD,
fixedA=as.integer(length(Adata > 0)),fixedB=as.integer(length(Bdata > 0)),fixedAbility=as.integer(length(Abilitydata > 0)))
devtools::load_all(".")
dat <- IRTsim()
score='score'; item='Item'; scale='Scale';Adata=c();Bdata=c();Abilitydata=c();
AMean=1;ASD=0;BMean=0;BSD=1000; AbilityMean=0;AbilitySD=1;iter=2000;cores=6;id='id'
sdat <- list(
Nobs=nrow(dat),
Nsubs=length(unique(dat[[id]])),
Nitems=length(unique(dat[[item]])),
Nscales=length(unique(dat[[scale]])),
id=as.integer(factor(dat[[id]])),
dopriors=1L,
start=1L,
end=as.integer(nrow(dat)),
score=array(as.integer(dat[[score]])),
item = array(as.integer(factor(dat[[item]]))),
Scale=array(as.integer(factor(dat[[scale]]))),
Adata=numeric(Adata),Bdata=Bdata,Abilitydata=Abilitydata,
AMean=AMean,ASD=ASD,BMean=BMean,BSD=BSD,AbilityMean=AbilityMean,AbilitySD=AbilitySD,
fixedA=as.integer(length(Adata > 0)),fixedB=as.integer(length(Bdata > 0)),fixedAbility=as.integer(length(Abilitydata > 0)))
Adata
Adata=c()
Adata
str(Adata)
array(Adata)
array(c())
array(numeric(),dim=c(1,0))
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
array(numeric(),dim=c(0))
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
library(rstan)
fit <- fitIRT(dat,cores=1)
library(bigIRT)
dat <- IRTsim()
devtools::load_all(".")
dat <- IRTsim()
library(rstan)
fit <- fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- fitIRT(dat,cores=1)
library(bigIRT)
rstantools::rstan_config
rstan_config()
rstantools::rstan_config()
rstantools::rstan_config
library(bigIRT)
dat <- IRTsim()
dat <- bigIRT:::IRTsim()
library(rstan)
fit <- bigIRT:::fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat,cores=1)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat,cores=1)
library(bigIRT)
devtools::load_all(".")
dat <- bigIRT:::IRTsim()
library(rstan)
library(mize)
fit <- bigIRT:::fitIRT(dat,cores=1)
library(bigIRT)
dat <- bigIRT:::IRTsim()
library(rstan)
fit <- bigIRT:::fitIRT(dat,cores=1)
exp(0)
library(bigIRT)
rstantools::rstan_config()
library(bigIRT)
dat <- bigIRT:::IRTsim()
library(rstan)
fit <- bigIRT:::fitIRT(dat,cores=1)
cp=constrain_pars(object = bigIRT:::stanmodels$`2pl`,fit$par)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat,cores=1)
fit$pars
devtools::load_all(".")
dat <- bigIRT:::IRTsim()
library(rstan)
fit <- bigIRT:::fitIRT(dat$dat,cores=1)
plot(fit$pars$Bpars,dat$B)
plot(fit$pars$Apars,dat$A)
plot(fit$pars$Abilitypars,dat$Abilitypars)
plot(fit$pars$Abilitypars,t(dat$Abilitypars))
dat$Abilitypars
plot(c(fit$pars$Abilitypars),dat$Ability)
dat <- bigIRT:::IRTsim(Nsubs = 1000,Nitems = 1000,Nscales = 1)
library(rstan)
fit <- bigIRT:::fitIRT(dat$dat,cores=1)
fit <- bigIRT:::fitIRT(dat$dat,Abilitydata = matrix(0,1000,1),cores=1)
library(bigIRT)
fit <- bigIRT:::fitIRT(dat$dat,Abilitydata = matrix(0,1000,1),cores=1)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=1)
plot(fit$pars$Bpars,dat$B)
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Bdata = fit$pars$B,cores=1)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Bdata = fit$pars$B,cores=1)
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=6)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=6)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=6)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=6)
devtools::load_all(".")
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=6)
fitc <- bigIRT:::fitIRT(dat$dat,cores=12)
fitc <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),cores=12)
plot(fit$pars$Bpars,dat$B)
plot(fit$pars$Apars,dat$A)
plot(c(fit$pars$Abilitypars),dat$Ability)
plot(fitc$pars$Bpars,dat$B)
plot(fitc$pars$Apars,dat$A)
plot(fitc$pars$B,dat$B)
plot(fitc$pars$A,dat$A)
plot(c(fitc$pars$Ability),dat$Ability)
plot(fitc$pars$B,fit$pars$B)
plot(fitc$pars$B-fit$pars$B)
plot(fitc$pars$B-fit$pars$B,fit$pars$B)
plot(fitc$pars$B,fit$pars$B)
abline(a = 0,b=1)
abline(0,1)
plot(fitc$pars$B,dat$B)
abline(0,1)
abline(0,-1)
plot(fitc$pars$B,dat$B)
abline(0,-1)
plot(fit$pars$Bpars,dat$B)
plot(fitc$pars$B,-dat$B)
abline(0,1)
plot(fit$pars$Bpars,dat$B)
plot(fit$pars$Bpars,-dat$B)
abline(0,1)
plot(fitc$pars$B,-dat$B)
points(fit$pars$B,-dat$B,col='red')
abline(a = 0,b=1)
plot(fitc$pars$Ability,-dat$Ability)
points(fit$pars$Ability,-dat$Ability,col='red')
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Bdata = fit$pars$B,cores=6)
plot(fit$pars$Apars,dat$A)
plot(fit$pars$A,dat$A)
plot(c(fit$pars$Abilitypars),dat$Ability)
plot(fitc$pars$Ability,dat$Ability)
points(fit$pars$Ability,dat$Ability,col='red')
abline(a = 0,b=1)
mean(dat$Ability)
devtools::load_all(".")
dat <- bigIRT:::IRTsim(Nsubs = 1000,Nitems = 1000,Nscales = 1)
fitc <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),cores=6)
plot(fitc$pars$B,-dat$B)
abline(0,1)
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Abilitydata = matrix(0,1000,1),cores=6)
fit <- bigIRT:::fitIRT(dat$dat,Adata = rep(1,1000),Bdata = fit$pars$B,cores=6)
plot(fit$pars$Bpars,-dat$B)
plot(fit$pars$B,-dat$B)
abline(0,1)
plot(fit$pars$A,dat$A)
plot(c(fit$pars$Abilitypars),dat$Ability)
abline(0,1)
plot(fitc$pars$B,-dat$B)
points(fit$pars$B,-dat$B,col='red')
abline(a = 0,b=1)
plot(fitc$pars$Ability,dat$Ability)
points(fit$pars$Ability,dat$Ability,col='red')
abline(a = 0,b=1)
plot(dat$Ability,(fitc$pars$Ability-dat$Ability)^2)
points(dat$Ability,(fit$pars$Ability-dat$Ability)^2,col='red')
sqrt(mean((fitc$pars$Ability-dat$Ability)^2))
sqrt(mean((fit$pars$Ability-dat$Ability)^2))
